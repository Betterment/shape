name: Check Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      coverage-matrix: ${{ steps.coverage-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - uses: dart-lang/setup-dart@e51d8e571e22473a2ddebf0ef8a2123f0ab2c02c # v1.7.1

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install Dependencies
        run: melos bootstrap

      - name: Format
        run: melos run format:ci

      - name: Analyze
        run: dart analyze --fatal-infos --fatal-warnings .

      - name: Run Tests
        run: |
          dart pub global activate coverage
          melos exec --dir-exists="test" -- "dart test --coverage=coverage"
          melos exec --dir-exists="test" -- "dart pub global run coverage:format_coverage --lcov --in=coverage --out=coverage/lcov.info --report-on=lib"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: packages/**/coverage/lcov.info

      - name: Generate Coverage Matrix
        id: coverage-matrix
        run: |
          # Get packages that have tests
          packages=$(melos list --dir-exists="test")

          # Create JSON array of objects with name and path
          matrix_json="["
          first=true
          for package in $packages; do
            if [ "$first" = true ]; then
              first=false
            else
              matrix_json+=","
            fi
            matrix_json+="{\"name\":\"$package\",\"path\":\"packages/$package/coverage/lcov.info\"}"
          done
          matrix_json+="]"

          echo "matrix=$matrix_json" >> "$GITHUB_OUTPUT"
          echo "Generated coverage matrix: $matrix_json"

  check_coverage:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build.outputs.coverage-matrix) }}
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: packages/

      - name: Inspect directories
        run: ls -R packages/

      - name: Check Code Coverage
        uses: VeryGoodOpenSource/very_good_coverage@c953fca3e24a915e111cc6f55f03f756dcb3964c # v3
        with:
          path: ${{ matrix.path }}

  check_pana:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build.outputs.coverage-matrix) }}
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - uses: dart-lang/setup-dart@e51d8e571e22473a2ddebf0ef8a2123f0ab2c02c # v1.7.1

      - name: Install Melos
        run: dart pub global activate melos

      - name: Install Dependencies
        run: melos bootstrap

      - name: Install Pana
        run: dart pub global activate pana

      - name: Verify Pub Score
        run: |
          cd "packages/${{ matrix.name }}" || exit 1
          ../../tool/verify_pub_score.sh $(cat PANA_SCORE)
